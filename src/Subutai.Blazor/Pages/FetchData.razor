@page "/projectlist"
@inject HttpClient Http
@inject IJSRuntime JS
@using Subutai.Domain.Model
@using Subutai.WebApi;
@using Subutai.Blazor.Data;
@using Blazored.LocalStorage
@inject Blazored.LocalStorage.ILocalStorageService localStorage

<h1>Projects List</h1>

<p>Datas Were fetch from PostgresqlDB.</p>

@if (projects == null)
{
    <p><em>Loading...</em></p>
}
else
{

    <table class="table">
        <thead>
            <tr>
                <th>Project ID</th>
                <th>Project Name</th>
                <th>Project Created Time</th>
                <th>Project Description</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var project in projects)
            {
                <tr>
                    <td>@project.Id</td>
                    <td>@project.Name</td>
                    <td>@project.CreatedAt</td>
                    <td>@project.Description</td>
                    <td><button class="btn btn-danger" @onclick="() => DeleteProject(project.Id)">Delete</button></td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<ProjectEntity>? projects;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if(firstRender)
        {
        var token = await localStorage.GetItemAsync<string>("authToken");
            if(token is not null)
            {
               Http.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
               
               var response = await Http.GetAsync("https://localhost:7108/api/action/getprojects");

                if(response is not null)
               {
                projects = await Http.GetFromJsonAsync<List<ProjectEntity>>("https://localhost:7108/api/action/getprojects");             
               }
               else
               {
                 Console.WriteLine("UnAuthorized User");
               }
            }
        StateHasChanged();
        }
    }
    private async Task DeleteProject(int id)
    {
         var confirmDelete = await JS.InvokeAsync<bool>("confirm", "Are you sure you want to delete this project?");
        if (confirmDelete)
        {
            var emptyContent = new StringContent("");
            var response = await Http.PostAsync($"https://localhost:7108/api/action/deleteproject/{id}", emptyContent);

            if (response.IsSuccessStatusCode)
            {
                await OnInitializedAsync();
            }
            else
            {
                // Handle error (show a message, for example)
                Console.WriteLine("Error deleting project");
            }

        }

    }

}

